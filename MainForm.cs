//-----------------------------------------------------------------------
// <copyright file="MainForm.cs" company="Andy Young">
//     Copyright (c) Andy Young. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
namespace OnSubmit.STunes
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Windows.Forms;
    using Newtonsoft.Json;
    using OnSubmit.STunes.Apis;
    using OnSubmit.STunes.Entities;
    using OnSubmit.STunes.Extensions;

    /// <summary>
    /// The main application form
    /// </summary>
    [SuppressMessage("Microsoft.Design", "IDE1006", Justification = "WinForms autogenerated methods")]
    [SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1600:ElementsMustBeDocumented", Justification = "WinForms autogenerated methods")]
    public partial class MainForm : Form
    {
        /// <summary>
        /// Authorization class
        /// </summary>
        private readonly Authorization authorization;

        /// <summary>
        /// Tracks keyed by their ID
        /// </summary>
        private readonly Dictionary<string, Track> tracks = new Dictionary<string, Track>();

        /// <summary>
        /// Albums keyed by their ID
        /// </summary>
        private readonly Dictionary<string, Album> albums = new Dictionary<string, Album>();

        /// <summary>
        /// Artists keyed by their ID
        /// </summary>
        private readonly Dictionary<string, Artist> artists = new Dictionary<string, Artist>();

        /// <summary>
        /// Filtered tracks to display in the data grid view
        /// </summary>
        private Dictionary<string, Track> filteredTracks = new Dictionary<string, Track>();

        /// <summary>
        /// Initializes a new instance of the <see cref="MainForm"/> class
        /// </summary>
        public MainForm()
        {
            this.InitializeComponent();
            this.authorization = new Authorization(this);
        }

        /// <summary>
        /// Task to get a fresh access token
        /// </summary>
        private Task<string> AccessTokenTask => this.authorization.GetAccessToken();

        /// <summary>
        /// Runs a task
        /// </summary>
        /// <typeparam name="T">Return type of task</typeparam>
        /// <param name="task">The task to run</param>
        /// <returns>The return value of the task</returns>
        private async Task<T> RunAsync<T>(Task<T> task)
        {
            T returnValue = await task;

            return returnValue;
        }

        private async void MainForm_Load(object sender, EventArgs e)
        {
            if (!string.IsNullOrWhiteSpace(Properties.Settings.Default.CacheKeyToFilenameMap))
            {
                ResponseCache.Deserialize(Properties.Settings.Default.CacheKeyToFilenameMap);
            }

            Dictionary<string, Playlist> playlists = await this.RunAsync(this.GetMyPlaylists());

            foreach (KeyValuePair<string, Playlist> playlist in playlists)
            {
                int rowId = this.dataGridViewPlaylists.Rows.Add();
                DataGridViewRow row = this.dataGridViewPlaylists.Rows[rowId];
                row.Tag = playlist.Value;
                row.Cells["Playlist"].Value = playlist.Value.Name;
            }

            this.dataGridViewPlaylists.CurrentCell = null;
        }

        private async Task<Dictionary<string, Playlist>> GetMyPlaylists()
        {
            const int MaxLimit = 50;

            PlaylistApi playlistApi = new PlaylistApi()
            {
                AuthorizationHeader = new AuthorizationHeader(await this.RunAsync(this.AccessTokenTask))
            };

            int offset = 0;
            dynamic json = await playlistApi.GetMyPlaylists(MaxLimit, offset);
            int total = json.total;

            List<dynamic> items = new List<dynamic>(json.items);
            List<Task<dynamic>> tasks = new List<Task<dynamic>>();
            for (int numItems = items.Count; numItems < total; numItems += MaxLimit)
            {
                offset += MaxLimit;
                tasks.Add(playlistApi.GetMyPlaylists(MaxLimit, offset));
            }

            items.AddRange((await Task.WhenAll(tasks)).SelectMany<dynamic, dynamic>(d => d.items));

            return items.ToDictionary(
                x => (string)x.id,
                x => new Playlist(
                    (string)x.id,
                    (string)x.name,
                    int.TryParse((string)x.tracks.total, out int numTracks) ? numTracks : 0));
        }

        private async Task<string> GetUserId()
        {
            MeApi meApi = new MeApi()
            {
                AuthorizationHeader = new AuthorizationHeader(await this.RunAsync(this.AccessTokenTask))
            };

            dynamic json = await meApi.GetCurrentUser(
                errorCallback: (errorResponse) =>
                {
                    MessageBox.Show(
                        errorResponse,
                        "Error",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                });

            return json.id;
        }

        private void MainForm_FormClosed(object sender, FormClosedEventArgs e)
        {
            Properties.Settings.Default.CacheKeyToFilenameMap = ResponseCache.Serialize();
            Properties.Settings.Default.Save();
        }

        private async Task GetSelectedPlaylistTracks(bool disableCache = false)
        {
            const int MaxLimit = 100;

            List<Task<dynamic>> getPlaylistTracksTasks = new List<Task<dynamic>>();
            List<Playlist> playlists = this.dataGridViewPlaylists.GetSelectedRowTags<Playlist>();

            if (playlists.Count != 1)
            {
                return;
            }

            Playlist playlist = playlists.Single();

            for (int offset = 0; offset < playlist.NumTracks; offset += MaxLimit)
            {
                PlaylistApi playlistApi = new PlaylistApi()
                {
                    AuthorizationHeader = new AuthorizationHeader(await this.RunAsync(this.AccessTokenTask))
                };

                getPlaylistTracksTasks.Add(playlistApi.GetPlaylistTracks(playlist.Id, MaxLimit, offset, disableCache));
            }

            if (!getPlaylistTracksTasks.Any())
            {
                return;
            }

            List<dynamic> playlistEntries = new List<dynamic>();
            foreach (dynamic x in await Task.WhenAll(getPlaylistTracksTasks))
            {
                playlistEntries.AddRange(x.items);
            }

            this.tracks.Clear();
            HashSet<string> artistIds = new HashSet<string>();
            foreach (dynamic playlistEntry in playlistEntries)
            {
                string trackId = playlistEntry.track.id;
                string trackName = playlistEntry.track.name;
                string albumId = playlistEntry.track.album.id;
                string albumName = playlistEntry.track.album.name;
                IEnumerable<dynamic> trackArtists = playlistEntry.track.artists;

                Album album = null;
                if (this.albums.ContainsKey(albumId))
                {
                    album = this.albums[albumId];
                }
                else
                {
                    album = new Album(albumId, albumName);
                    this.albums.Add(albumId, album);
                }

                Track track = null;
                if (this.tracks.ContainsKey(trackId))
                {
                    track = this.tracks[trackId];
                }
                else
                {
                    HashSet<Artist> artists = new HashSet<Artist>();
                    foreach (dynamic trackArtist in trackArtists)
                    {
                        string artistId = trackArtist.id;
                        string artistName = trackArtist.name;

                        Artist artist;
                        if (this.artists.ContainsKey(artistId))
                        {
                            artist = this.artists[artistId];
                        }
                        else
                        {
                            artist = new Artist(artistId, artistName);
                            this.artists.Add(artistId, artist);
                        }

                        artists.Add(artist);
                    }

                    track = new Track(trackId, trackName, artists, album);
                    this.tracks.Add(trackId, track);
                }

                artistIds.UnionWith(track.ArtistIds);
            }

            Dictionary<string, HashSet<string>> genres = await this.GetGenres(artistIds);
            foreach (KeyValuePair<string, HashSet<string>> kvp in genres)
            {
                if (this.artists.ContainsKey(kvp.Key))
                {
                    this.artists[kvp.Key].Genres = kvp.Value;
                }
            }

            this.DetachFilterEvents();
            this.PopulateTracks(this.tracks);
            this.PopulateGenres(this.tracks);
            this.PopulateArtists(this.tracks);
            this.PopulateAlbums(this.tracks);
            this.AttachFilterEvents();
        }

        private async void dataGridViewPlaylists_SelectionChanged(object sender, EventArgs e)
        {
            await this.GetSelectedPlaylistTracks();
        }

        private void AttachFilterEvents()
        {
            this.dataGridViewGenres.SelectionChanged += this.dataGridViewGenres_SelectionChanged;
            this.dataGridViewArtists.SelectionChanged += this.dataGridViewArtists_SelectionChanged;
            this.dataGridViewAlbums.SelectionChanged += this.dataGridViewAlbums_SelectionChanged;
        }

        private void DetachFilterEvents()
        {
            this.dataGridViewGenres.SelectionChanged -= this.dataGridViewGenres_SelectionChanged;
            this.dataGridViewArtists.SelectionChanged -= this.dataGridViewArtists_SelectionChanged;
            this.dataGridViewAlbums.SelectionChanged -= this.dataGridViewAlbums_SelectionChanged;
        }

        private async Task<Dictionary<string, HashSet<string>>> GetGenres(HashSet<string> artistIds)
        {
            const int MaxLimit = 50;

            Dictionary<string, HashSet<string>> genres = new Dictionary<string, HashSet<string>>();

            List<string> artistIdsList = artistIds.ToList();
            List<Task<dynamic>> tasks = new List<Task<dynamic>>();
            for (int index = 0; index < artistIdsList.Count; index += MaxLimit)
            {
                List<string> subset = artistIdsList.GetRange(index, Math.Min(MaxLimit, artistIds.Count - index));
                ArtistApi artistApi = new ArtistApi()
                {
                    AuthorizationHeader = new AuthorizationHeader(await this.RunAsync(this.AccessTokenTask))
                };

                tasks.Add(artistApi.GetArtists(subset));
            }

            if (!tasks.Any())
            {
                return genres;
            }

            List<dynamic> items = new List<dynamic>();
            foreach (dynamic x in await Task.WhenAll(tasks))
            {
                items.AddRange(x.artists);
            }

            foreach (dynamic x in items)
            {
                string artistId = x.id;
                IEnumerable<string> newGenres = x.genres.ToObject<IEnumerable<string>>();
                HashSet<string> genresHash = new HashSet<string>();
                if (newGenres.Any())
                {
                    genresHash.UnionWith(newGenres.Select(CultureInfo.CurrentCulture.TextInfo.ToTitleCase));
                }
                else
                {
                    genresHash.Add("(Unclassified)");
                }

                genres.Add(artistId, genresHash);
            }

            return genres;
        }

        private void PopulateTracks(Dictionary<string, Track> tracks)
        {
            this.dataGridViewTracks.Rows.Clear();

            int i = 1;
            foreach (Track track in tracks.Values)
            {
                int rowId = this.dataGridViewTracks.Rows.Add();
                DataGridViewRow row = this.dataGridViewTracks.Rows[rowId];
                row.Tag = track;
                row.Cells["Number"].Value = i++;
                row.Cells["Track"].Value = track.Name;
                row.Cells["Artist"].Value = track.ArtistNames;
                row.Cells["Album"].Value = track.Album.Name;
            }

            this.dataGridViewTracks.CurrentCell = null;
        }

        private void PopulateGenres(Dictionary<string, Track> tracks)
        {
            bool hasAllRowSelected;
            List<string> selectedGenres = this.dataGridViewGenres.GetSelectedFilterRowTags<string>(out hasAllRowSelected);

            this.dataGridViewGenres.Rows.Clear();

            HashSet<string> genres = new HashSet<string>(
                tracks.Values.SelectMany(
                    t => t.Artists.Values.SelectMany(
                        a => a.Genres)));

            string allRowValue = $"All ({genres.Count} Genre{(genres.Count != 1 ? "s" : string.Empty)})";
            this.dataGridViewGenres.AddRow("GenreFilter", allRowValue, "(All)", selected: hasAllRowSelected, makeBold: true);

            foreach (string genre in genres.OrderBy(g => g))
            {
                this.dataGridViewGenres.AddRow(
                    "GenreFilter",
                    genre,
                    selected: !hasAllRowSelected && selectedGenres.Contains(genre));
            }

            this.dataGridViewGenres.CurrentCell = null;
        }

        private void PopulateArtists(Dictionary<string, Track> tracks)
        {
            bool hasAllRowSelected;
            List<Artist> selectedArtists = this.dataGridViewArtists.GetSelectedFilterRowTags<Artist>(out hasAllRowSelected);

            this.dataGridViewArtists.Rows.Clear();

            HashSet<(string ArtistId, Artist Artist)> artists = new HashSet<(string, Artist)>(
                tracks.Values.SelectMany(
                    t => t.Artists.Values.Select(
                        a => (a.Id, a))));

            string allRowValue = $"All ({artists.Count} Artist{(artists.Count != 1 ? "s" : string.Empty)})";
            this.dataGridViewArtists.AddRow("ArtistFilter", allRowValue, "(All)", selected: hasAllRowSelected, makeBold: true);

            foreach ((string artistId, Artist artist) in artists.OrderBy(g => g.Artist.Name))
            {
                this.dataGridViewArtists.AddRow(
                    "ArtistFilter",
                    artist.Name,
                    artist,
                    selected: !hasAllRowSelected && selectedArtists.Any(a => a.Id == artist.Id));
            }

            this.dataGridViewArtists.CurrentCell = null;
        }

        private void PopulateAlbums(Dictionary<string, Track> tracks)
        {
            bool hasAllRowSelected;
            List<Album> selectedAlbums = this.dataGridViewAlbums.GetSelectedFilterRowTags<Album>(out hasAllRowSelected);

            this.dataGridViewAlbums.Rows.Clear();

            HashSet<Album> albums = new HashSet<Album>(
                tracks.Values.Select(t => t.Album));

            string allRowValue = $"All ({albums.Count} Album{(albums.Count != 1 ? "s" : string.Empty)})";
            this.dataGridViewAlbums.AddRow("AlbumFilter", allRowValue, "(All)", selected: hasAllRowSelected, makeBold: true);

            foreach (Album album in albums.OrderBy(g => g.Name))
            {
                this.dataGridViewAlbums.AddRow(
                    "AlbumFilter",
                    album.Name,
                    album,
                    selected: !hasAllRowSelected && selectedAlbums.Any(a => a.Id == album.Id));
            }

            this.dataGridViewAlbums.CurrentCell = null;
        }

        private void dataGridViewGenres_SelectionChanged(object sender, EventArgs e)
        {
            this.FilterTracks(FilterType.Genre);
        }

        private void dataGridViewArtists_SelectionChanged(object sender, EventArgs e)
        {
            this.FilterTracks(FilterType.Artist);
        }

        private void dataGridViewAlbums_SelectionChanged(object sender, EventArgs e)
        {
            this.FilterTracks(FilterType.Album);
        }

        private void FilterTracks(FilterType currentFilter)
        {
            if (this.dataGridViewGenres.SelectedRows == null
                && this.dataGridViewArtists.SelectedRows == null
                && this.dataGridViewAlbums.SelectedRows == null
                && this.dataGridViewGenres.SelectedRows.Count == 0
                && this.dataGridViewArtists.SelectedRows.Count == 0
                && this.dataGridViewAlbums.SelectedRows.Count == 0)
            {
                return;
            }

            bool allowAnyArtist = currentFilter != FilterType.Artist;
            bool allowAnyAlbum = currentFilter != FilterType.Album;

            List<string> genres = this.dataGridViewGenres.GetSelectedFilterRowTags<string>();
            List<Artist> artistIds = allowAnyArtist ? null : this.dataGridViewArtists.GetSelectedFilterRowTags<Artist>();
            List<Album> albumIds = allowAnyAlbum ? null : this.dataGridViewAlbums.GetSelectedFilterRowTags<Album>();

            this.filteredTracks.Clear();
            IEnumerable<KeyValuePair<string, Track>> query =
                from kvp in this.tracks
                let trackId = kvp.Key
                let track = kvp.Value
                where track.Artists.Values.Any(a => a.Genres.Any(g => genres.Contains(g)))
                where allowAnyArtist || artistIds.Any(a => track.ArtistIds.Contains(a.Id))
                where allowAnyAlbum || albumIds.Any(a => track.Album.Id == a.Id)
                select kvp;

            this.filteredTracks = query.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);

            this.DetachFilterEvents();
            this.PopulateTracks(this.filteredTracks);

            if (currentFilter == FilterType.Genre)
            {
                // Artist list can only be filtered by Genre
                this.PopulateArtists(this.filteredTracks);
            }

            if (currentFilter != FilterType.Album)
            {
                // Album list can be filtered by Genre and Artist
                this.PopulateAlbums(this.filteredTracks);
            }

            this.AttachFilterEvents();
        }

        private void textBoxGenre_TextChanged(object sender, EventArgs e)
        {
            string filter = this.textBoxGenre.Text.Trim();
            int numVisibleRows = this.ConstrainFilter(this.dataGridViewGenres, "GenreFilter", filter);
            this.dataGridViewGenres.Rows[0].Cells["GenreFilter"].Value = $"All ({numVisibleRows} Genre{(numVisibleRows != 1 ? "s" : string.Empty)})";
            this.FilterTracks(FilterType.Genre);
        }

        private void textBoxArtist_TextChanged(object sender, EventArgs e)
        {
            string filter = this.textBoxArtist.Text.Trim();
            int numVisibleRows = this.ConstrainFilter(this.dataGridViewArtists, "ArtistFilter", filter);
            this.dataGridViewArtists.Rows[0].Cells["ArtistFilter"].Value = $"All ({numVisibleRows} Artist{(numVisibleRows != 1 ? "s" : string.Empty)})";
            this.FilterTracks(FilterType.Artist);
        }

        private void textBoxAlbum_TextChanged(object sender, EventArgs e)
        {
            string filter = this.textBoxAlbum.Text.Trim();
            int numVisibleRows = this.ConstrainFilter(this.dataGridViewAlbums, "AlbumFilter", filter);
            this.dataGridViewAlbums.Rows[0].Cells["AlbumFilter"].Value = $"All ({numVisibleRows} Album{(numVisibleRows != 1 ? "s" : string.Empty)})";
            this.FilterTracks(FilterType.Album);
        }

        private int ConstrainFilter(DataGridView dataGridView, string columnName, string filter)
        {
            int numVisibleRows = 0;
            foreach (DataGridViewRow row in dataGridView.Rows)
            {
                string value = row.Cells[columnName].Value.ToString();

                bool visible = string.IsNullOrEmpty(value)
                    || "(All)".Equals(row.Tag)
                    || value.IndexOf(filter, StringComparison.OrdinalIgnoreCase) >= 0;

                row.Visible = visible;

                if (visible)
                {
                    numVisibleRows++;
                }
            }

            // Subtract 1 for "(All)" row which is always visible
            return numVisibleRows - 1;
        }

        private void dataGridView_KeyDown(object sender, KeyEventArgs e)
        {
            DataGridView dataGridView = sender as DataGridView;
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.A)
            {
                foreach (DataGridViewRow row in dataGridView.Rows)
                {
                    // Don't select invisible rows
                    row.Selected = row.Visible;
                }

                e.Handled = true;
                e.SuppressKeyPress = true;
            }
        }

        private async void dataGridViewTracks_DoubleClick(object sender, EventArgs e)
        {
            await this.PlaySelectedTracks();
        }

        private async void playSelectedTracksToolStripMenuItem_Click(object sender, EventArgs e)
        {
            await this.PlaySelectedTracks();
        }

        private Action HandlePlayerApiError(string response, Action retryAction)
        {
            return new Action(
                async () =>
                {
                    dynamic json = JsonConvert.DeserializeObject(response);

                    if ("NO_ACTIVE_DEVICE".Equals((string)json.error.reason))
                    {
                        DialogResult retryResult;
                        do
                        {
                            PlayerApi playerApi = new PlayerApi()
                            {
                                AuthorizationHeader = new AuthorizationHeader(await this.RunAsync(AccessTokenTask))
                            };

                            ChooseDeviceForm chooseDeviceForm = new ChooseDeviceForm(playerApi);
                            if (chooseDeviceForm.ShowDialog(this) == DialogResult.OK)
                            {
                                await playerApi.TransferPlayback(chooseDeviceForm.SelectedDevice.Id);

                                bool isDeviceActive = false;
                                for (int i = 0; !isDeviceActive && i < 5; i++)
                                {
                                    dynamic devicesJson = await playerApi.GetDevices();
                                    foreach (dynamic device in devicesJson.devices)
                                    {
                                        if ((string)device.id != chooseDeviceForm.SelectedDevice.Id)
                                        {
                                            continue;
                                        }

                                        isDeviceActive = device.is_active;
                                    }
                                }

                                if (isDeviceActive)
                                {
                                    await Task.Run(retryAction);
                                    break;
                                }
                            }

                            retryResult = MessageBox.Show(
                                "Select a device to play to.",
                                "No active device",
                                MessageBoxButtons.RetryCancel,
                                MessageBoxIcon.Error);
                        }
                        while (retryResult == DialogResult.Retry);
                    }
                });
        }

        private async Task PlaySelectedTracks()
        {
            List<Track> tracks = this.dataGridViewTracks.GetSelectedFilterRowTags<Track>();
            PlayerApi playerApi = new PlayerApi()
            {
                AuthorizationHeader = new AuthorizationHeader(await this.RunAsync(this.AccessTokenTask))
            };

            await playerApi.PlayTracks(
                tracks.Select(t => t.Uri),
                errorCallback: (response) => this.HandlePlayerApiError(
                    response,
                    async () => await this.PlaySelectedTracks()).Invoke());
        }

        private async Task PlayAllTracks()
        {
            List<Track> tracks = this.dataGridViewTracks.GetAllVisibleRowTags<Track>();
            PlayerApi playerApi = new PlayerApi()
            {
                AuthorizationHeader = new AuthorizationHeader(await this.RunAsync(this.AccessTokenTask))
            };

            await playerApi.PlayTracks(
                tracks.Select(t => t.Uri),
                errorCallback: (response) => this.HandlePlayerApiError(
                    response,
                    async () => await this.PlayAllTracks()).Invoke());
        }

        private async void playAllTracksToolStripMenuItem_Click(object sender, EventArgs e)
        {
            await this.PlayAllTracks();
        }

        private async void refreshPlaylistToolStripMenuItem_Click(object sender, EventArgs e)
        {
            await this.GetSelectedPlaylistTracks(disableCache: true);
        }

        private async void dataGridViewPlaylists_CellMouseDoubleClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            await this.PlaySelectedPlaylist();
        }

        private async void playPlaylistToolStripMenuItem_Click(object sender, EventArgs e)
        {
            await this.PlaySelectedPlaylist();
        }

        private async Task PlaySelectedPlaylist()
        {
            List<Playlist> playlists = this.dataGridViewPlaylists.GetSelectedRowTags<Playlist>();

            if (playlists.Count != 1)
            {
                return;
            }

            Playlist playlist = playlists.Single();

            PlayerApi playerApi = new PlayerApi()
            {
                AuthorizationHeader = new AuthorizationHeader(await this.RunAsync(this.AccessTokenTask))
            };

            await playerApi.PlayPlaylist(
                playlist.Uri,
                errorCallback: (response) => this.HandlePlayerApiError(
                    response,
                    async () => await this.PlaySelectedPlaylist()).Invoke());
        }

        private void dataGridView_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
        {
            DataGridView dataGridView = sender as DataGridView;
            if (e.Button == MouseButtons.Right)
            {
                if (dataGridView.SelectedRows.Count > 1)
                {
                    return;
                }

                int rowSelected = e.RowIndex;
                if (e.RowIndex != -1)
                {
                    dataGridView.ClearSelection();
                    dataGridView.Rows[rowSelected].Selected = true;
                }
            }
        }
    }
}
