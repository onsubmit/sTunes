//-----------------------------------------------------------------------
// <copyright file="AuthorizeForm.cs" company="Andy Young">
//     Copyright (c) Andy Young. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace OnSubmit.STunes
{
    using System;
    using System.Collections.Specialized;
    using System.Diagnostics;
    using System.Diagnostics.CodeAnalysis;
    using System.Web;
    using System.Windows.Forms;
    using OnSubmit.STunes.Apis;
    using OnSubmit.STunes.Helpers;

    /// <summary>
    /// Form used to authorize the user
    /// </summary>
    [SuppressMessage("Microsoft.Design", "IDE1006", Justification = "WinForms autogenerated methods")]
    [SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1600:ElementsMustBeDocumented", Justification = "WinForms autogenerated methods")]
    public partial class AuthorizeForm : Form
    {
        /// <summary>
        /// The authorize URI
        /// </summary>
        private Uri authorizeUri;

        /// <summary>
        /// The redirect URI
        /// </summary>
        private Uri redirectUri;

        /// <summary>
        /// The value of the "state" parameter provided to the authorize endpoint
        /// </summary>
        private string initialState;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizeForm"/> class
        /// </summary>
        public AuthorizeForm()
        {
            this.InitializeComponent();
        }

        /// <summary>
        /// Gets the authorization code
        /// </summary>
        public string AuthorizationCode { get; private set; }

        private void webBrowser_Navigated(object sender, WebBrowserNavigatedEventArgs e)
        {
            this.toolStripProgressBar.Visible = false;
            this.textBoxUrl.Text = this.webBrowser.Url.ToString();

            if (this.webBrowser.Url.Host == this.redirectUri.Host
                && this.webBrowser.Url.AbsolutePath == this.redirectUri.AbsolutePath)
            {
                NameValueCollection query = HttpUtility.ParseQueryString(this.webBrowser.Url.Query);

                if (string.IsNullOrWhiteSpace(query["code"]))
                {
                    DialogResult dialogResult = MessageBox.Show(
                        "Access code not found.",
                        "Error",
                        MessageBoxButtons.RetryCancel,
                        MessageBoxIcon.Error);

                    if (dialogResult == DialogResult.Cancel)
                    {
                        this.Close();
                    }
                    else
                    {
                        this.webBrowser.Navigate(this.authorizeUri);
                    }
                }
                else
                {
                    string endState = query["state"];
                    
                    if (!string.IsNullOrWhiteSpace(this.initialState)
                        && endState != this.initialState)
                    {
                        DialogResult dialogResult = MessageBox.Show(
                            "The value of the 'state' query string parameter did not match the original value provided " +
                            "to the /authorize endpoint. " +
                            $"Expected: {this.initialState}. " +
                            $"Actual: {endState ?? "null"}",
                            "Possible cross-site request forgery",
                            MessageBoxButtons.RetryCancel,
                            MessageBoxIcon.Error);

                        if (dialogResult == DialogResult.Cancel)
                        {
                            this.Close();
                        }
                        else
                        {
                            this.webBrowser.Navigate(this.authorizeUri);
                            return;
                        }
                    }

                    this.AuthorizationCode = query["code"];
                    this.webBrowser.Navigated -= this.webBrowser_Navigated;

                    Properties.Settings.Default.ClientId = this.textBoxClientId.Text;
                    Properties.Settings.Default.ClientSecret = this.textBoxClientSecret.Text.EncryptString();
                    Properties.Settings.Default.RedirectUri = this.textBoxRedirectUri.Text;
                    Properties.Settings.Default.Save();

                    this.Close();
                }
            }
        }

        private void webBrowser_Navigating(object sender, WebBrowserNavigatingEventArgs e)
        {
            this.toolStripProgressBar.Visible = true;
        }

        private void linkLabelClientId_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Process.Start("https://developer.spotify.com/dashboard/applications");
        }

        private void textBoxClientId_TextChanged(object sender, EventArgs e)
        {
            this.SetButtonState();
        }

        private void textBoxClientSecret_TextChanged(object sender, EventArgs e)
        {
            this.SetButtonState();
        }

        private void textBoxRedirectUri_TextChanged(object sender, EventArgs e)
        {
            this.SetButtonState();
        }

        /// <summary>
        /// Sets the button state
        /// </summary>
        private void SetButtonState()
        {
            this.buttonGetAccessToken.Enabled = !string.IsNullOrWhiteSpace(this.textBoxClientId.Text)
                && !string.IsNullOrWhiteSpace(this.textBoxClientSecret.Text)
                && !string.IsNullOrWhiteSpace(this.textBoxRedirectUri.Text);
        }

        private void buttonGetAccessToken_Click(object sender, EventArgs e)
        {
            this.buttonGetAccessToken.Enabled = false;

            string[] scopes = new[]
                {
                    "playlist-read-private",
                    "playlist-read-collaborative",
                    "user-read-playback-state",
                    "user-modify-playback-state"
                };

            AuthorizeApi authorizeApi = new AuthorizeApi();
            this.initialState = Guid.NewGuid().ToString();
            this.authorizeUri = authorizeApi.GetAuthorizeUri(
                clientId: this.textBoxClientId.Text,
                responseType: "code",
                redirectUri: this.textBoxRedirectUri.Text,
                state: this.initialState,
                scope: string.Join(" ", scopes));

            this.redirectUri = new Uri(this.textBoxRedirectUri.Text);

            this.textBoxUrl.Text = this.authorizeUri.ToString();
            this.webBrowser.Navigate(this.authorizeUri);
        }
    }
}
